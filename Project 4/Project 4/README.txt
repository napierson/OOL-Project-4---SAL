This is Nathan Pierson's, UIN 660611615, submission for project 4, a reimplementation of project 2's Assembly Language Interpreter in C++ instead of Smalltalk. It was coded in Visual Studio for Windows 10 and hopefully compiles correctly in your environment.

The classes are found in the VM.h and VM.cpp files, while the client shell that handles user input is found in Client.cpp. The input.sal and output.txt files correspond to the SAL program you want to run and the output, respectively. Included for completeness are the rest of the project files generated by VS, but those five should handle everything.

Valid input.sal files should consist of a series of SAL statements on separate lines. Unlike the Smalltalk implementation of SAL, but in conformity with the specifications, my ALI only allows single-character variable names.

The commands are case sensitive, so "i" reads input but "I" does nothing.

The save command overwrites all previous output logs, instead of appending them to the end.

When using the "i" command to read in an input, the source code of the program does appear, but in the form of the full dump of the current state of the virtual machine, occupying the first however many entries of its memory. This tends to require scrolling up to see.

Unlike the Smalltalk implementation of SAL, but in conformity with the specifications, my ALI only allows single-character variable names.

I tested this with several SAL programs, including the one in this zip file under input.txt but also including several of those written on Piazza back when we were testing our solutions for Project 2.